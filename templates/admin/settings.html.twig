{% extends 'admin/base.html.twig' %}

{% block body %}
	<section class="container">
		<div class="row ms-3 ms-sm-2 ms-md-0">
			<div class="col ps-0">
				{% for flash in app.flashes('notice') %}
				<div class="alert alert-success" role="alert">
				
						{{ flash }}
				</div>
				{% endfor %}

				<h2 class="fw-bold">Settings</h2>
				<p>Miscellaneous</p>
			</div>
		</div>
		<div class="row mt-2">
			<div class="col-12 col-md-6 d-flex flex-row align-items-center">
				<p class="mb-0">Select tab: &nbsp;</p>
				<select id="page-switcher">

					<option value="Category">Categories</option>
					<option value="Size" {% if classItem == 'Size' %} selected {% endif %}>Sizes</option>
					<option value="Color" {% if classItem == 'Color' %} selected {% endif %}>Colors</option>
					<option value="Brand" {% if classItem == 'Brand' %} selected {% endif %}>Brands</option>
				</select>
			</div>
		</div>

	
	{# ##### Including TABS starts here ##### #}

	{% if classItem=="Category" %}
		{% include('admin/settings-tabs/categories.html.twig') %}
	{% elseif classItem=="Color" %}
		{% include('admin/settings-tabs/colors.html.twig') %}
	{% elseif classItem=="Brand" %}
		{% include('admin/settings-tabs/brands.html.twig') %}
	{% elseif classItem=="Size" %}
		{% include('admin/settings-tabs/sizes.html.twig') %}
	{% endif %}
	{# ##### Including TABS ends here ##### #}

				{# #### PAGINATION CONTROLS STARTS HERE ### #}
				{% if items is not null %}
					<div class="d-flex justify-content-center mt-0 my-3 mt-md-5">
						{{ knp_pagination_render(items) }}

					</div>
				{% endif %}
				{# #####  PAGINATION CONTROLS ENDS HERE ##### #}

				<div>
					<a href="{{ path('item_add', { class: classItem }) }}" id="add-item" class="btn btn-action">Add new</a>
				</div>

				{# ****** MODALS STARTS HERE ******* #}
				{% import 'admin/components/macro-edit-modal.html.twig' as macro %}
				{{ macro.edit_item_modal() }}
				{# ****** MODALS ENDS HERE ******* #}

			</section>
		{% endblock %}
		{% block javascripts %}
			{{ parent() }}
			<script>
			document.addEventListener("DOMContentLoaded", function () {
	  let feedType = '';
	  let id = 0;
	  const editBtns = document.querySelectorAll(".editButton");
	  const catInput = document.getElementById("category-input");
	  // Get the <span> element that closes the modal
	  const okBtn = document.getElementById('ok-button');


	  /* Modal winow pops up, attaching id and inserting value to input */
	  editBtns.forEach((button) => button.addEventListener('click', function (e) {
	    const dataSet = e.target.parentNode.parentNode.dataset;
	    id = dataSet.id;
	    feedType = dataSet.type;
	
	    catInput.setAttribute('value', dataSet.feed);
	  }));

	  /* Modal buttons Ok and Cancel */
	  okBtn.addEventListener('click', function () {
	    const feedName = catInput.value;
	    if (feedName == null || feedName == '') {
	      const modalError = document.getElementById('modal-error');
	      modalError.innerText = "Input field is empty";
	      return;
	    }

	// REDIRECTING TO ADMIN CONTROLLER TO SAVE ITEM
	// FIRST LETTER MUST BE CAPITALIZED
	if (feedType != null || feedType != '') {	
       location.href = `/admin/item-save/${id}/${feedName}/${feedType}`;
	} else {
		location.href = '/admin/settings';
	}
})
	  const pageSwitcher = document.getElementById('page-switcher');
	  pageSwitcher.addEventListener('click', switchPage);
	})
	function switchPage(ev) {
	  let route = "{{ path('settings', {class: 'class'} ) }}";
	  route = route.replace('class', ev.target.value);
	  window.location = route;
	}
			</script>
		{% endblock %}
