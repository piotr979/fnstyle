{% extends 'admin/base.html.twig' %}

{% block stylesheets %}
	{{ parent() }}
	<link rel="stylesheet" href="https://unpkg.com/dropzone@5/dist/min/dropzone.min.css" type="text/css"/>
{% endblock %}
{% block body %}
	<section id="container" class="container">
		{% include 'admin/components/admin-header.html.twig' with {'heading' : 'Modify stock'} %}
	
  	{% for flash in app.flashes('notice') %}
        <p class="text-danger">{{ flash }}</p>
    {% endfor %}

    <div class="row mt-2">
			<div class="col-12 col-md-6 ms-0 ps-0">
				{{ form_start(stockForm, { 'attr' : {'onsubmit' : 'return validateForm();' } }) }}
				<ul class="stocks list-unstyled" id="stocks-data" 
				data-index="{{ stockForm.stocks|length > 0 ? stockForm.stocks|length : 0 }}" data-prototype="{{ form_widget(stockForm.stocks.vars.prototype)|e('html_attr') }}">
					{% for stock in _context.stockForm.stocks %}
						<li class="">
							{{ form_widget(stock) }}
						</li>
					{% endfor %}
				</ul>
        
         <p id="errors" class="text-danger"></p>
				<div class="d-flex flex-row align-items-center">

					{{ form_row(stockForm.submit)}}
         
					{{ form_end(stockForm) }}
					<div class="ms-2 mb-3">
						<button type="button" class="btn btn-action__success" data-collection-holder-class="stocks" id="add-new-button">Add new size</button>
					</div>
				</div>
				<!-- Change /upload-target to your upload address -->
				<!-- Or With An Input Field Fallback -->
			</div>
		</div>
	</section>

{% endblock %}
{% block javascripts %}
	{{ parent() }}
	<script>
  const validateForm = () => {
    const allColors = document.querySelectorAll('.color-select');
    const allSizes = document.querySelectorAll('.size-select');

  let colorsSelected = new Array();
  let sizesSelected = new Array();
  const convNodeListToArray = (nodeList) => {
    let arr = Array();
     nodeList.forEach( 
            function(currentValue) {
      arr.push(parseInt(currentValue.value));
    });
    return arr;
  }

    // Check repeating of colors and sizes
 colorsSelected = convNodeListToArray(allColors);
 sizesSelected = convNodeListToArray(allSizes);
 let areNotDuplicated = true;
 var isDuplicate = colorsSelected.some( function(item, index) {

    if (colorsSelected.indexOf(item) != index) {
      // indexRepeatSource is first element repeated
      // indexRepeatTarget is the element to be highlighted as repeated
      const indexRepeatSource = colorsSelected.indexOf(item)
      const indexRepeatTarget = index;
      let areNotduplicated = new Boolean(true);
  
      // now check if sizes of these are same
      if (sizesSelected[indexRepeatSource] == sizesSelected[index]) {
        const errors = document.getElementById('errors');
        errors.innerHTML = "You have duplicated colors and sizes.";
        areNotDuplicated = false;
      }
    };
 })
     return areNotDuplicated;
  }
document.addEventListener("DOMContentLoaded", function () {
  /* Get list of all stock subforms - ul parent element */
  const collectionHolder = document.getElementById("stocks-data");
 
	console.log(collectionHolder);
  /* Get single stock subform for adding new one */
  const protoData = collectionHolder.dataset.prototype;

  const addDeleteButton = (item) => {
    /* New delete button must be added to div element inside li,where
         the item is li. */
    const divInsideItem = item.querySelector("div");
    const buttonWrapper = document.createElement("div");

    buttonWrapper.classList.add("mt-3");
    const deleteButton = document.createElement("button");
    const trashImage = document.createElement("i");
    trashImage.classList.add("bi");
    trashImage.classList.add("bi-trash");

    deleteButton.appendChild(trashImage);
    deleteButton.classList.add("btn");
    deleteButton.classList.add("btn-danger");
    buttonWrapper.appendChild(deleteButton);
    divInsideItem.append(buttonWrapper);
    deleteButton.addEventListener("click", (e) => {
      e.preventDefault();
      item.remove();
    });
  };

  const addStockForm = (e) => {
		 e.preventDefault();
    const item = document.createElement("li");
    console.log(item);
    const form = protoData.replace(/__name__/g, collectionHolder.dataset.index);
    item.innerHTML = form;
    collectionHolder.appendChild(item);
    collectionHolder.dataset.index++;
    addDeleteButton(item);
	}

 if (collectionHolder.dataset.index == 0) {
	   const item = document.createElement("li");
    console.log(item);
    const form = protoData.replace(/__name__/g, collectionHolder.dataset.index);
    item.innerHTML = form;
    collectionHolder.appendChild(item);
    collectionHolder.dataset.index++;
  }

  /* Add new size subform to the form */
  const addButton = document.getElementById("add-new-button");
  addButton.addEventListener("click", addStockForm);

  /* Add delete button to each stock subform */
  collectionHolder.querySelectorAll("li").forEach((item) => {
    addDeleteButton(item);
  });
});
	</script>
{% endblock %}
